<section id="content-upload" class="bg-white p-6 rounded-lg shadow-md max-w-lg mx-auto">
    <h2 class="text-xl font-semibold mb-4">Subir Archivo de Progreso</h2>

    <form id="uploadForm" class="space-y-4">
        <label for="clubId" class="block text-sm font-medium text-gray-700">ID del Club</label>
        <input type="number" id="clubId" name="clubId" required 
            class="w-full p-2 border border-gray-300 rounded-lg focus:ring focus:ring-blue-300">

        <label for="file" class="block text-sm font-medium text-gray-700">Seleccionar Archivo</label>
        <input type="file" id="file" name="file" accept=".xlsx,.xls" required 
            class="w-full p-2 border border-gray-300 rounded-lg focus:ring focus:ring-blue-300">

        <p id="fileError" class="text-red-500 text-sm hidden">Formato no válido. Solo .xlsx y .xls.</p>

        <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700">
            Subir Archivo
        </button>
    </form>

    <div id="uploadResult" class="mt-4 text-sm"></div>
</section>

<script>
document.getElementById('uploadForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const fileInput = document.getElementById('file');
    const file = fileInput.files[0];
    const clubId = document.getElementById('clubId').value;
    const fileError = document.getElementById('fileError');
    const uploadResult = document.getElementById('uploadResult');

    // Validar archivo
    if (!file || !['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'].includes(file.type)) {
        fileError.classList.remove('hidden');
        return;
    } else {
        fileError.classList.add('hidden');
    }

    // Crear FormData
    const formData = new FormData();
    formData.append('file', file);
    formData.append('clubId', clubId);

    try {
        const response = await fetch('/api/v1/progress/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();

        if (result.errors > 0) {
            // Construir mensaje con detalles de error
            const errorMessages = result.errorDetails.map(err => 
                `<li>${err.user}: ${err.error}</li>`
            ).join('');

            uploadResult.innerHTML = `
                <p class="text-red-600 font-semibold">Hubo errores en la carga:</p>
                <ul class="text-red-500 list-disc list-inside">${errorMessages}</ul>
            `;
        } else {
            uploadResult.innerHTML = `<p class="text-green-600">Archivo subido con éxito.</p>`;
        }

    } catch (error) {
        uploadResult.innerHTML = `<p class="text-red-600">${error.message}</p>`;
    }
});
</script>
